#!/usr/bin/env bash
#  ╦═╗╦╔═╗╔═╗  ╦╔╗╔╔═╗╔╦╗╔═╗╦  ╦  ╔═╗╦═╗
#  ╠╦╝║║  ║╣   ║║║║╚═╗ ║ ╠═╣║  ║  ║╣ ╠╦╝
#  ╩╚═╩╚═╝╚═╝  ╩╝╚╝╚═╝ ╩ ╩ ╩╩═╝╩═╝╚═╝╩╚═
#	Script to install my hyprdots
#   Author: z0mbi3
#	url: https://github.com/gh0stzk

CRE=$(tput setaf 1)
CYE=$(tput setaf 3)
CGR=$(tput setaf 2)
CBL=$(tput setaf 4)
BLD=$(tput bold)
CNC=$(tput sgr0)

backup_folder=~/.RiceBackup
date=$(date +%Y%m%d-%H%M%S)

logo () {

	local text="${1:?}"
	echo -en "
	               %%%
	        %%%%%//%%%%%
	      %%************%%%
	  (%%//############*****%%
	%%%%%**###&&&&&&&&&###**//
	%%(**##&&&#########&&&##**
	%%(**##*****#####*****##**%%%
	%%(**##     *****     ##**
	   //##   @@**   @@   ##//
	     ##     **###     ##
	     #######     #####//
	       ###**&&&&&**###
	       &&&         &&&
	       &&&////   &&
	          &&//@@@**
	            ..***
			  z0mbi3 hyprdots\n\n"
    printf ' %s [%s%s %s%s %s]%s\n\n' "${CRE}" "${CNC}" "${CYE}" "${text}" "${CNC}" "${CRE}" "${CNC}"
}

########## ---------- You must not run this as root ---------- ##########

if [ "$(id -u)" = 0 ]; then
    echo "This script MUST NOT be run as root user."
    exit 1
fi

########## ---------- Welcome ---------- ##########

logo "Welcome!"
printf '%s%sThis script will check if you have the necessary dependencies, and if not, it will install them. Then, it will clone the RICE in your HOME directory.\nAfter that, it will create a secure backup of your files, and then copy the new files to your computer.\n\nMy hyprdots DO NOT modify any of your system configurations.\nYou will be prompted for your root password to install missing dependencies and/or to switch to zsh shell if its not your default.\n\nThis script doesnt have the potential power to break your system, it only copies files from my repository to your HOME directory.%s\n\n' "${BLD}" "${CRE}" "${CNC}"

while true; do
	read -rp " Do you wish to continue? [y/N]: " yn
		case $yn in
			[Yy]* ) break;;
			[Nn]* ) exit;;
			* ) printf " Error: just write 'y' or 'n'\n\n";;
		esac
    done
clear

########## ---------- Install packages ---------- ##########

logo "Installing needed packages.."

dependencias=(base-devel hyprland kitty foot trayer socat dunst fuzzel geany ranger xdg-user-dirs papirus-icon-theme gvfs ark dolphin viewnior ttf-droid noto-fonts-emoji xfce4-power-manager kvantum qt5ct fish thunar thunar-archive-plugin file-roller wl-clipboard wireplumber pipewire polkit-gnome git swappy)

is_installed() {
  pacman -Qi "$1" &> /dev/null
  return $?
}

printf "%s%sChecking for required packages...%s\n" "${BLD}" "${CBL}" "${CNC}"
for paquete in "${dependencias[@]}"
do
  if ! is_installed "$paquete"; then
    sudo pacman -S "$paquete" --noconfirm
    printf "\n"
  else
    printf '%s%s is already installed on your system!%s\n' "${CGR}" "$paquete" "${CNC}"
    sleep 1
  fi
done
sleep 3
clear

########## ---------- Preparing Folders ---------- ##########

# Verifica si el archivo user-dirs.dirs no existe en ~/.config
	if [ ! -e "$HOME/.config/user-dirs.dirs" ]; then
		xdg-user-dirs-update
		echo "Creating xdg-user-dirs"
	fi
sleep 2
clear

########## ---------- Cloning the Rice! ---------- ##########

logo "Downloading hyprdots"

repo_url="https://github.com/taylor85345/hyprland-dotfiles.git"
repo_dir="$HOME/hyprland-dotfiles"

# Verifica si el directorio del repositorio ya existe y, si es así, lo elimina
	if [ -d "$repo_dir" ]; then
		printf "Removing existing hyprdots repository\n"
		rm -rf "$repo_dir"
	fi

# Clona el repositorio
printf "Cloning hyprdots from %s\n" "$repo_url"
git clone --recursive "$repo_url" "$repo_dir"

sleep 2
clear

########## ---------- Copy the Rice! ---------- ##########

git clone --recursive https://github.com/taylor85345/hyprland-dotfiles.git

fc-cache -rv >/dev/null 2>&1
printf "%s%sFiles copied succesfully!!%s\n" "${BLD}" "${CGR}" "${CNC}"
sleep 3

########## ---------- Installing Paru & others ---------- ##########

logo "installing Paru, Eww, tdrop, xqp & nwg-look-bin"

# Installing Paru
	if command -v paru >/dev/null 2>&1; then
		printf "%s%sParu is already installed%s\n" "${BLD}" "${CGR}" "${CNC}"
	else
		printf "%s%sInstalling paru%s\n" "${BLD}" "${CBL}" "${CNC}"
		{
			cd "$HOME" || exit
			git clone https://aur.archlinux.org/paru-bin.git
			cd paru-bin || exit
			makepkg -si --noconfirm
		} || {
			printf "\n%s%sFailed to install Paru. You may need to install it manually%s\n" "${BLD}" "${CRE}" "${CNC}"
			}
	fi

# Intalling tdrop for eww-wayland
	if command -v eww-wayland >/dev/null 2>&1; then
		printf "\n%s%seww-wayland is already installed%s\n" "${BLD}" "${CGR}" "${CNC}"
	else
		printf "\n%s%sInstalling eww-wayland, this should be fast!%s\n" "${BLD}" "${CBL}" "${CNC}"
		paru -S eww-wayland --skipreview --noconfirm
	fi

# Intalling nerd-fonts-inter
	if command -v nerd-fonts-inter >/dev/null 2>&1; then
		printf "\n%s%snerd-fonts-inter is already installed%s\n" "${BLD}" "${CGR}" "${CNC}"
	else
		printf "\n%s%sInstalling nerd-fonts-inter, this should be fast!%s\n" "${BLD}" "${CBL}" "${CNC}"
		paru -S nerd-fonts-inter --skipreview --noconfirm
	fi
# Intalling nwg-look-bin
	if command -v nwg-look-bin >/dev/null 2>&1; then
		printf "\n%s%snwg-look-bin is already installed%s\n" "${BLD}" "${CGR}" "${CNC}"
	else
		printf "\n%s%sInstalling nwg-look-bin, this should be fast!%s\n" "${BLD}" "${CBL}" "${CNC}"
		paru -S nwg-look-bin --skipreview --noconfirm
	fi
  # Intalling rofi-lbonn-wayland
	if command -v rofi-lbonn-wayland >/dev/null 2>&1; then
		printf "\n%s%srofi-lbonn-wayland is already installed%s\n" "${BLD}" "${CGR}" "${CNC}"
	else
		printf "\n%s%sInstalling rofi-lbonn-wayland, this should be fast!%s\n" "${BLD}" "${CBL}" "${CNC}"
		paru -S rofi-lbonn-wayland --skipreview --noconfirm
	fi
   # Intalling mpvpaper
	if command -v mpvpaper >/dev/null 2>&1; then
		printf "\n%s%smpvpaper is already installed%s\n" "${BLD}" "${CGR}" "${CNC}"
	else
		printf "\n%s%sInstalling mpvpaper, this should be fast!%s\n" "${BLD}" "${CBL}" "${CNC}"
		paru -S mpvpaper --skipreview --noconfirm
	fi
    # Intalling geticons-git
	if command -v geticons-git >/dev/null 2>&1; then
		printf "\n%s%sgeticons-git is already installed%s\n" "${BLD}" "${CGR}" "${CNC}"
	else
		printf "\n%s%sInstalling geticons-git, this should be fast!%s\n" "${BLD}" "${CBL}" "${CNC}"
		paru -S geticons-git --skipreview --noconfirm
	fi
     # Intalling macchina-bin
	if command -v macchina-bin >/dev/null 2>&1; then
		printf "\n%s%smacchina-bin is already installed%s\n" "${BLD}" "${CGR}" "${CNC}"
	else
		printf "\n%s%sInstalling macchina-bin, this should be fast!%s\n" "${BLD}" "${CBL}" "${CNC}"
		paru -S macchina-bin --skipreview --noconfirm
	fi
     # Intalling sddm-git
	if command -v sddm-git >/dev/null 2>&1; then
		printf "\n%s%ssddm-git is already installed%s\n" "${BLD}" "${CGR}" "${CNC}"
	else
		printf "\n%s%sInstalling sddm-git, this should be fast!%s\n" "${BLD}" "${CBL}" "${CNC}"
		paru -S sddm-git --skipreview --noconfirm
	fi

logo "Installing artwork-breath-gtk Themes"
git clone https://github.com/manjaro/artwork-breath-gtk.git
cd artwork-breath-gtk/
sudo find Breath-Dark -type f -exec install -Dm644 '{}' "$pkgdir/usr/share/themes/{}" \;
cd
printf "%s%sDone!!%s\n" "${BLD}" "${CGR}" "${CNC}"
sleep 2
clear

logo "Installing Inverse-dark-kde Themes"
git clone https://github.com/yeyushengfan258/Inverse-dark-kde.git
cd cd Inverse-dark-kde/
./install.sh
cd
printf "%s%sDone!!%s\n" "${BLD}" "${CGR}" "${CNC}"
sleep 2
clear

logo "Setup TimeZone Asia/Manila.."
sudo timedatectl set-timezone Asia/Manila >/dev/null 2>&1
printf "%s%sSuccesfully!%s\n" "${BLD}" "${CGR}" "${CNC}"
sleep 2
clear

logo "Enabling SDDM service"
sudo systemctl enable sddm
printf "%s%sDone!!%s\n" "${BLD}" "${CGR}" "${CNC}"
sleep 2
clear

######### --------- Changing shell to zsh ---------- ##########

logo "Installation finished"
printf "%s%sNow Reboot, select bspwm and log in.%s\n\n" "${BLD}" "${CRE}" "${CNC}"
sudo reboot
